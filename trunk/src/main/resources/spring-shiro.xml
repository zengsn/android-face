<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">


    <mvc:annotation-driven />

    <context:component-scan base-package="com.gdp" >
        <!-- 不扫描 controller 控制器 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>


    <!-- 1. 配置 SecurityManager. 核心 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 配置 session 的管理方式 -->
        <property name="realm" ref="jdbcRealm"></property>
    </bean>
    <!-- 1. 配置 SecurityManager : end -->

    <!-- 2. 配置 cacheManager.   -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- 2.1 加入encache 的 jar包及 cache 的配置文件 -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    <!-- 2. 配置 cacheManager ： end  -->

    <!-- 3. 配置 Realm :start
            3.1 直接配置实现接口 Realm 的bean
     -->
    <bean id="jdbcRealm" class="com.gdp.realms.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher" >
                <!--  加密的算法  -->
                <property name="hashAlgorithmName" value="MD5"></property>
                <!-- hashIterations 加密的次数  -->
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>
    <!-- 3. 配置 Realm :end -->

    <!-- 4. 配置 LifecycleBeanPostProcessor :start
        可以自动的来调用配置在 spring IOC 容器中的shiro bean 的声明周期的方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 4. 配置 LifecycleBeanPostProcessor :end -->

    <!-- 5. 启用IOC 容器中使用 shiro 的注解，
        但必须在配置了 LifecycleBeanPostProcessor 之后使用 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- 5. 启用IOC 容器中使用 shiro 的注解 :end -->

    <!-- 6. 配置ShiroFilter(重点) :start -->
    <!-- 	6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致. -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--登录页面-->
        <property name="loginUrl" value="/login.html"/>
        <!--  登录成功页面
                <property name="successUrl" value="/list.jsp"/>-->
        <!-- 没有权限的页面 -->
        <!-- <property name="unauthorizedUrl" value="login.html" /> -->

        <!--
        	配置哪些页面需要受保护
        	以及访问这些页面需要的权限
        	1) anon 可以被匿名访问
        	2) authc 必须认证(登录)后才能够访问
        	3) logout 登出
        	第一次匹配优先
         -->
        <property name="filterChainDefinitions">
            <value>
                /*.html = anon
                /*.jsp = anon
                /image/** = anon
                /css/** = anon
                /js/** = anon
                /static/** = anon
                /lib/** = anon
                /uploads/** = anon
                /admin/login = anon
                /admin/logout = anon
                /admin/wxlogin = anon
                /wx/getOpenId = anon

                /faceInfo/** = roles[user]

                # 角色权限配置
                # /User/** = roles[user]
                /admin/** = roles[admin]

                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>
    <!-- 6. 配置ShiroFilter(重点) : end -->

</beans>